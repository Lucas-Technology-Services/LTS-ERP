# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- develop

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: 'sdk'
      version: '5.0.100'
<<<<<<< HEAD
<<<<<<< HEAD:Express Store- DMS002/azure-pipelines-exs.yml
  - script: dotnet build ./Express Store-DMS002/SimplCommerce.sln
=======
<<<<<<< HEAD:azure-pipelines.yml
  - script: dotnet build ./source/LucasTechnologyServices.sln
>>>>>>> 08c4e0c5fb7f8dfddac95bee8864b124af2dc22f
=======
  - script: dotnet build ./ExpressStore-DMS002/SimplCommerce.sln
>>>>>>> 08c4e0c5fb7f8dfddac95bee8864b124af2dc22f:ExpressStore- DMS002/azure-pipelines.yml
    displayName: 'dotnet build'
  - task: DotNetCoreCLI@2
    displayName: 'run tests'
    inputs:
      command: test
      arguments:  '--logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude=[xunit.*]*%2c[System.*]*'
      projects: 'test/**/*.csproj'
      nobuild: true
  - task: DotNetCoreCLI@2
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool
  - script: ./reportgenerator "-reports:$(Build.SourcesDirectory)/test/**/coverage.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)/coverlet/reports" "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
    displayName: Create reports
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  

- job: macOS
  pool:
    vmImage: 'macOS-10.15'
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: 'sdk'
      version: '5.0.100'
<<<<<<< HEAD
<<<<<<< HEAD:Express Store- DMS002/azure-pipelines-exs.yml
  - script: dotnet build ./Express Store-DMS002/SimplCommerce.sln
=======
<<<<<<< HEAD:azure-pipelines.yml
  - script: dotnet build ./source/LucasTechnologyServices.sln
>>>>>>> 08c4e0c5fb7f8dfddac95bee8864b124af2dc22f
=======
  - script: dotnet build ./ExpressStore-DMS002/SimplCommerce.sln
>>>>>>> 08c4e0c5fb7f8dfddac95bee8864b124af2dc22f:ExpressStore- DMS002/azure-pipelines.yml
    displayName: 'dotnet build'
  - task: DotNetCoreCLI@2
    displayName: 'run tests'
    inputs:
      command: test
      arguments:  '--logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude=[xunit.*]*%2c[System.*]*'
<<<<<<< HEAD
      projects: 'Express Sore=DMS002/test/**/*.csproj'
=======
      projects: 'test/**/*.csproj'
>>>>>>> 08c4e0c5fb7f8dfddac95bee8864b124af2dc22f
      nobuild: true
  - task: DotNetCoreCLI@2
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool
  - script: ./reportgenerator -reports:$(Build.SourcesDirectory)/test/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
    displayName: Create reports
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  

- job: Windows
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: 'sdk'
      version: '5.0.100'
  - task: DotNetCoreCLI@2
    displayName: 'Restoring code using dotnet restore'
    inputs: 
      command: 'restore'
      projects: '**/*/*.csproj'
      includeNuGetOrg: true
<<<<<<< HEAD
<<<<<<< HEAD:Express Store- DMS002/azure-pipelines-exs.yml
  - script: dotnet build ./Express Store-DMS002/SimplCommerce.sln
=======
<<<<<<< HEAD:azure-pipelines.yml
  - script: dotnet build ./source/LucasTechnologyServices.sln
>>>>>>> 08c4e0c5fb7f8dfddac95bee8864b124af2dc22f
=======
  - script: dotnet build ./ExpressStore-DMS002/SimplCommerce.sln
>>>>>>> 08c4e0c5fb7f8dfddac95bee8864b124af2dc22f:ExpressStore- DMS002/azure-pipelines.yml
    displayName: 'dotnet build'
  - task: DotNetCoreCLI@2
    displayName: 'run tests'
    inputs:
      command: test
      arguments:  '--logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude=[xunit.*]*%2c[System.*]*'
      projects: 'test/**/*.csproj'
      nobuild: true
  - task: DotNetCoreCLI@2
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool
  - script: .\reportgenerator -reports:$(Build.SourcesDirectory)\test\**\coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)\coverlet\reports -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
    displayName: Create reports 
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  

- job: LinuxRelease
  pool:
    vmImage: 'ubuntu-18.04'
  variables:
    buildConfiguration: 'Release'
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: 'sdk'
      version: '5.0.100'
<<<<<<< HEAD
  - script: dotnet build --configuration $(buildConfiguration)
    displayName: 'dotnet build $(buildConfiguration)'
=======
  - script: dotnet build ./source/LucasTechnologyServices.sln
    displayName: 'dotnet build'
  
>>>>>>> 08c4e0c5fb7f8dfddac95bee8864b124af2dc22f
  - task: DotNetCoreCLI@2
    displayName: 'run tests'
    inputs:
      command: test
      arguments:  '--configuration $(buildConfiguration) --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude=[xunit.*]*%2c[System.*]*'
<<<<<<< HEAD
      projects: 'Express Store-DMS002/test/**/*.csproj'
=======
      projects: 'test/**/*.csproj'
>>>>>>> 08c4e0c5fb7f8dfddac95bee8864b124af2dc22f
      nobuild: true
  - task: DotNetCoreCLI@2
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . dotnet-reportgenerator-globaltool
      displayName: Install ReportGenerator tool
  - script: ./reportgenerator -reports:$(Build.SourcesDirectory)/test/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
    displayName: Create reports   
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml  
